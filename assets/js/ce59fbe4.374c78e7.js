(self["webpackChunkwebsite"] = self["webpackChunkwebsite"] || []).push([[132],{

/***/ 7116:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return /* binding */ Example; }
});

// EXTERNAL MODULE: ../node_modules/react/index.js
var react = __webpack_require__(7378);
// EXTERNAL MODULE: ./src/pages/examples/_exampleWrapper.jsx
var _exampleWrapper = __webpack_require__(1713);
// EXTERNAL MODULE: ../node_modules/@docusaurus/theme-live-codeblock/src/theme/CodeBlock/index.js + 11 modules
var CodeBlock = __webpack_require__(1642);
// EXTERNAL MODULE: ./src/pages/examples/_diagramContainer.jsx + 1 modules
var _diagramContainer = __webpack_require__(1353);
;// CONCATENATED MODULE: ../node_modules/raw-loader/dist/cjs.js!./src/pages/examples/_updatePortsPositionDiagram.tsx
/* harmony default export */ var _updatePortsPositionDiagram = ("import React, { useEffect, useState } from 'react';\nimport {\n  Diagram,\n  disableNodeUserInteractionClassName,\n  INodeVisualComponentProps,\n  Port,\n} from 'react-easy-diagram';\nimport { observer } from 'mobx-react-lite';\n\nconst NodeWithExternalData = observer<INodeVisualComponentProps>(\n  ({ draggableRef, entity: node }) => {\n    const [linesNumber, setLinesNumber] = useState<number>(0);\n\n    useEffect(() => {\n      // Size and position changes in DOM element are not reported to the library, so it is\n      // required to trigger recalculation if you think size or position is changed. There is also\n      // possibility to store your data that could change size or position in port's or node's \"extra\" property,\n      // changes in these properties along with the other are already handled by library.\n      node.recalculatePortsSizeAndPosition();\n    }, [linesNumber]);\n\n    const lines = useLines(linesNumber);\n\n    return (\n      <div\n        className='react_fast_diagram_Node_Default'\n        ref={draggableRef}\n        style={{\n          padding: 15,\n          border: node.selected ? '#6eb7ff solid 1px' : '',\n        }}\n      >\n        <div>Node with external state that cause node resize</div>\n        <div>Fields:</div>\n\n        {lines.map(l => l)}\n\n        <div>\n          <button\n            className={disableNodeUserInteractionClassName}\n            type='button'\n            onClick={() => setLinesNumber((c) => c + 1)}\n          >\n            Add line\n          </button>\n        </div>\n\n        <Port id='left' position='left-center' />\n        <Port id='top' position='top-center' />\n        <Port id='right' position='right-center' />\n        <Port id='bottom' position='bottom-center' />\n      </div>\n    );\n  }\n);\n\nconst NodeWithInternalData = observer<INodeVisualComponentProps>(\n  ({ draggableRef, entity: node }) => {\n    const linesNumber = node.extra ?? 0;\n\n    const lines = useLines(linesNumber);\n\n    return (\n      <div\n        className='react_fast_diagram_Node_Default'\n        ref={draggableRef}\n        style={{\n          padding: 15,\n          border: node.selected ? '#6eb7ff solid 1px' : '',\n        }}\n      >\n        <div>Node with internal state that cause node resize</div>\n        <div>Fields:</div>\n\n        {lines.map(l => l)}\n\n        <div>\n          <button\n            className={disableNodeUserInteractionClassName}\n            type='button'\n            onClick={() => node.setExtra(linesNumber + 1)}\n          >\n            Add line\n          </button>\n        </div>\n\n        <Port id='left' position='left-center' />\n        <Port id='top' position='top-center' />\n        <Port id='right' position='right-center' />\n        <Port id='bottom' position='bottom-center' />\n      </div>\n    );\n  }\n);\n\nfunction useLines(count: number) {\n  const lines = []\n  for (let i = 0; i < count; i++) {\n    lines.push(<span key={i}>Line {i}</span>);\n  }\n  return lines;\n}\n\nexport default () => (\n  <Diagram\n    initState={{\n      nodes: [\n        {\n          id: 'external',\n          position: [0, 0],\n          type: 'external',\n        },\n        {\n          id: 'internal',\n          position: [400, 0],\n          type: 'internal',\n        },\n        {\n          id: 'left_node',\n          position: [-200, 100],\n          type: 'output_horizontal',\n        },\n        {\n          id: 'top_node',\n          position: [300, -200],\n          type: 'output_vertical',\n        },\n        {\n          id: 'right_node',\n          position: [800, 100],\n          type: 'input_horizontal',\n        },\n        {\n          id: 'bottom_node',\n          position: [300, 300],\n          type: 'input_vertical',\n        },\n      ],\n      links: [\n        {\n          source: {\n            nodeId: 'internal',\n            portId: 'left',\n          },\n          target: {\n            nodeId: 'external',\n            portId: 'right',\n          },\n        },\n        {\n          source: {\n            nodeId: 'internal',\n            portId: 'top',\n          },\n          target: {\n            nodeId: 'top_node',\n            portId: 'output',\n          },\n        },\n        {\n          source: {\n            nodeId: 'internal',\n            portId: 'right',\n          },\n          target: {\n            nodeId: 'right_node',\n            portId: 'input',\n          },\n        },\n        {\n          source: {\n            nodeId: 'internal',\n            portId: 'bottom',\n          },\n          target: {\n            nodeId: 'bottom_node',\n            portId: 'input',\n          },\n        },\n\n        {\n          source: {\n            nodeId: 'external',\n            portId: 'left',\n          },\n          target: {\n            nodeId: 'left_node',\n            portId: 'output',\n          },\n        },\n        {\n          source: {\n            nodeId: 'external',\n            portId: 'top',\n          },\n          target: {\n            nodeId: 'top_node',\n            portId: 'output',\n          },\n        },\n        {\n          source: {\n            nodeId: 'external',\n            portId: 'bottom',\n          },\n          target: {\n            nodeId: 'bottom_node',\n            portId: 'input',\n          },\n        },\n      ],\n    }}\n    settings={{\n      nodes: {\n        components: {\n          internal: NodeWithInternalData,\n          external: NodeWithExternalData,\n        },\n      },\n    }}\n  />\n);\n");
// EXTERNAL MODULE: ./node_modules/react-easy-diagram/dist/index.esm.js + 1 modules
var index_esm = __webpack_require__(9919);
// EXTERNAL MODULE: ../node_modules/mobx-react-lite/es/index.js + 17 modules
var es = __webpack_require__(5479);
;// CONCATENATED MODULE: ./src/pages/examples/_updatePortsPositionDiagram.tsx
var NodeWithExternalData=(0,es/* observer */.Pi)(function(_ref){var draggableRef=_ref.draggableRef,node=_ref.entity;var _useState=(0,react.useState)(0),linesNumber=_useState[0],setLinesNumber=_useState[1];(0,react.useEffect)(function(){// Size and position changes in DOM element are not reported to the library, so it is
// required to trigger recalculation if you think size or position is changed. There is also
// possibility to store your data that could change size or position in port's or node's "extra" property,
// changes in these properties along with the other are already handled by library.
node.recalculatePortsSizeAndPosition();},[linesNumber]);var lines=useLines(linesNumber);return/*#__PURE__*/react.createElement("div",{className:"react_fast_diagram_Node_Default",ref:draggableRef,style:{padding:15,border:node.selected?'#6eb7ff solid 1px':''}},/*#__PURE__*/react.createElement("div",null,"Node with external state that cause node resize"),/*#__PURE__*/react.createElement("div",null,"Fields:"),lines.map(function(l){return l;}),/*#__PURE__*/react.createElement("div",null,/*#__PURE__*/react.createElement("button",{className:index_esm.disableNodeUserInteractionClassName,type:"button",onClick:function onClick(){return setLinesNumber(function(c){return c+1;});}},"Add line")),/*#__PURE__*/react.createElement(index_esm.Port,{id:"left",position:"left-center"}),/*#__PURE__*/react.createElement(index_esm.Port,{id:"top",position:"top-center"}),/*#__PURE__*/react.createElement(index_esm.Port,{id:"right",position:"right-center"}),/*#__PURE__*/react.createElement(index_esm.Port,{id:"bottom",position:"bottom-center"}));});var NodeWithInternalData=(0,es/* observer */.Pi)(function(_ref2){var _node$extra;var draggableRef=_ref2.draggableRef,node=_ref2.entity;var linesNumber=(_node$extra=node.extra)!=null?_node$extra:0;var lines=useLines(linesNumber);return/*#__PURE__*/react.createElement("div",{className:"react_fast_diagram_Node_Default",ref:draggableRef,style:{padding:15,border:node.selected?'#6eb7ff solid 1px':''}},/*#__PURE__*/react.createElement("div",null,"Node with internal state that cause node resize"),/*#__PURE__*/react.createElement("div",null,"Fields:"),lines.map(function(l){return l;}),/*#__PURE__*/react.createElement("div",null,/*#__PURE__*/react.createElement("button",{className:index_esm.disableNodeUserInteractionClassName,type:"button",onClick:function onClick(){return node.setExtra(linesNumber+1);}},"Add line")),/*#__PURE__*/react.createElement(index_esm.Port,{id:"left",position:"left-center"}),/*#__PURE__*/react.createElement(index_esm.Port,{id:"top",position:"top-center"}),/*#__PURE__*/react.createElement(index_esm.Port,{id:"right",position:"right-center"}),/*#__PURE__*/react.createElement(index_esm.Port,{id:"bottom",position:"bottom-center"}));});function useLines(count){var lines=[];for(var i=0;i<count;i++){lines.push(/*#__PURE__*/react.createElement("span",{key:i},"Line ",i));}return lines;}/* harmony default export */ var examples_updatePortsPositionDiagram = (function(){return/*#__PURE__*/react.createElement(index_esm.Diagram,{initState:{nodes:[{id:'external',position:[0,0],type:'external'},{id:'internal',position:[400,0],type:'internal'},{id:'left_node',position:[-200,100],type:'output_horizontal'},{id:'top_node',position:[300,-200],type:'output_vertical'},{id:'right_node',position:[800,100],type:'input_horizontal'},{id:'bottom_node',position:[300,300],type:'input_vertical'}],links:[{source:{nodeId:'internal',portId:'left'},target:{nodeId:'external',portId:'right'}},{source:{nodeId:'internal',portId:'top'},target:{nodeId:'top_node',portId:'output'}},{source:{nodeId:'internal',portId:'right'},target:{nodeId:'right_node',portId:'input'}},{source:{nodeId:'internal',portId:'bottom'},target:{nodeId:'bottom_node',portId:'input'}},{source:{nodeId:'external',portId:'left'},target:{nodeId:'left_node',portId:'output'}},{source:{nodeId:'external',portId:'top'},target:{nodeId:'top_node',portId:'output'}},{source:{nodeId:'external',portId:'bottom'},target:{nodeId:'bottom_node',portId:'input'}}]},settings:{nodes:{components:{internal:NodeWithInternalData,external:NodeWithExternalData}}}});});
;// CONCATENATED MODULE: ./src/pages/examples/updatePortsPosition.jsx
function Example(){return/*#__PURE__*/react.createElement(_exampleWrapper/* ExampleWrapper */.U,{title:"Update ports position example"},/*#__PURE__*/react.createElement(_diagramContainer/* DiagramContainer */.G,null,/*#__PURE__*/react.createElement(examples_updatePortsPositionDiagram,null)),/*#__PURE__*/react.createElement(CodeBlock/* default */.Z,{className:"language-jsx"},_updatePortsPositionDiagram));}

/***/ })

}]);